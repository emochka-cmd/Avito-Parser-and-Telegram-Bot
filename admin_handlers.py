from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from database_istance import db
import asyncio
from ScrollPage import ScrollPage
import validators
import os


class AdminStates(StatesGroup):
    waiting_for_url = State()
    parsing_in_progress = State()

# --- –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä --- 
admin_router = Router()

# --- –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ---
ADMINS = list(map(int, os.getenv("TgAdmins", "0").split(",")))

# --- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ---
admin_router.message.filter(F.from_user.id.in_(ADMINS))
admin_router.callback_query.filter(F.from_user.id.in_(ADMINS))

active_parser: ScrollPage | None = None

# --- –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: ---
def start_parsing_kb() -> InlineKeyboardMarkup:
    inline_main = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data='parse_confirm_yes'),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data='parse_confirm_no')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_main)


def stop_parsing_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data='stop_parsing')]]
    )

    
def main_kb() -> InlineKeyboardMarkup:
    inline_main = [
        [InlineKeyboardButton(text="üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö", callback_data='info_five_ads')],
        [InlineKeyboardButton(text="üîé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ç–µ–º–µ", callback_data='ads_count')],
        [InlineKeyboardButton(text="üîÑ –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É", callback_data='avto')],
        [InlineKeyboardButton(text="üóëÔ∏è –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ –∏–∑ –±–∞–∑—ã", callback_data='clear_all')],
        [InlineKeyboardButton(text="üì•  –°–∫–∞—á–∞—Ç—å HTML –∫–æ–¥", callback_data='start_parsing')],
        [InlineKeyboardButton(text="üì•  –ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML –∫–æ–¥–∞", callback_data='start_parsing')],
        [InlineKeyboardButton(text="üîç –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data='current_url')],
        [InlineKeyboardButton(text="üîó –ó–∞–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data='new_url')],
        [InlineKeyboardButton(text="üìä –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", callback_data='ads_total')],
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_main)


# --- –ø—Ä–∏ Start ---
@admin_router.message(CommandStart())
async def admin_start(message: Message):
    await message.answer_sticker('CAACAgIAAxkBAAERTqxombj0GO3zAAFj_8AHu7XfjbmkoeEAAgEBAAJWnb0KIr6fDrjC5jQ2BA')
    await message.answer("üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())


# --- Start Parsing ---
async def run_scroll_and_notify(sc: ScrollPage, call: CallbackQuery):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.
    """
    try:
        for idx, html in enumerate(sc.scroll_all_page()):
            await call.message.answer(f"‚úÖ –°–∫–∞—á–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ{idx+1}")

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            with open(f"page_{idx}.html", "w", encoding="utf-8") as f:
                f.write(html)

            await asyncio.sleep(0)  # –æ—Ç–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª—É

        await call.message.answer("üèÅ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –±—ã–ª –∑–∞–≤–µ—Ä–µ—à–µ–Ω.", reply_markup=main_kb())
    except Exception as e:
        await call.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}", reply_markup=main_kb())


@admin_router.callback_query(F.data == 'stop_parsing')
async def stop_parsing(call: CallbackQuery):
    global active_parser
    if not active_parser:
        await call.message.answer("‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω", reply_markup=main_kb())
        return

    active_parser.stop_scroll()
    await call.message.answer("‚èπ –ü–∞—Ä—Å–∏–Ω–≥ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω...")

    
@admin_router.callback_query(F.data == 'start_parsing')
async def start_parsing(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)
    url =  await db.current_url(tg_id=call.from_user.id)

    if not url:
        await call.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ avito URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞!")
        return

    await state.set_state(AdminStates.parsing_in_progress)
    await state.update_data(url=url)

    await call.message.answer(f"üîç –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ URL:\n{url}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=start_parsing_kb())


async def run_parsing(sc: ScrollPage):
    try:
        await sc.scroll_all_page()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")


@admin_router.callback_query(F.data == 'parse_confirm_yes')
async def yes_parsing(call:CallbackQuery, state: FSMContext):
    global active_parser
    data = await state.get_data()
    url = data.get('url')

    if not url:
        await call.message.answer("‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.")
        await state.clear()
        return

    active_parser = ScrollPage(url=url)

    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer('üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥...', reply_markup=stop_parsing_kb())

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π ScrollPage –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    asyncio.create_task(run_scroll_and_notify(active_parser, call))

    await state.clear()


@admin_router.callback_query(F.data == 'parse_confirm_no')
async def no_parsing(call: CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer('–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω, —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π üëá', reply_markup=main_kb())

    
# --- Current URL ---
@admin_router.callback_query(F.data == 'current_url')
async def current_url(call: CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=None)
    url = await db.current_url(tg_id=call.from_user.id)
    await call.message.answer(f'–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {url}') 

# --- –ö–æ–¥ –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ URL ---
@admin_router.callback_query(F.data == 'new_url')
async def change_url(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é Avito —Å—Å—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:')
    await state.set_state(AdminStates.waiting_for_url)


@admin_router.message(AdminStates.waiting_for_url)
async def save_new_url(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    url = message.text.strip()

    if not validators.url(url):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    try:
        await db.change_url(tg_id=tg_id, url=url)
        await message.answer("‚úÖ Url –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–º–µ–Ω—ë–Ω.")
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ url –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}')
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ URL.")
    finally:
        await state.clear()


# --- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π ---
@admin_router.callback_query(F.data == 'ads_total')
async def ads_total(call: CallbackQuery):
    try:
        await call.message.edit_reply_markup(reply_markup=None)
        total = await db.count_ads()
        await call.message.answer(f'üìä –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–π—á–∞—Å {total} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ë–î: {e}')
        await call.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã.")
