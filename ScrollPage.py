import time
import random
import json
from typing import Dict, Any, Generator
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, StaleElementReferenceException
from fake_useragent import UserAgent


class ScrollPage:
    def __init__(self, url: str = None, cookies: str = 'cookies.json', headless: bool = None):
        """–£–∫–∞–∂–∏—Ç–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ê–≤–∏—Ç–æ –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ñ–∞–π–ª cookies"""
        if url is None:
            raise ValueError("–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ê–≤–∏—Ç–æ. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

        self.url = url
        self.cookies = cookies
        self.headless = headless
        self.options = uc.ChromeOptions()
        self._seting_options()

        self.driver = uc.Chrome(options=self.options)
        self.driver.get(url)
        self._load_cookies()
        self.driver.refresh()


        check = self._check_block()
        if check["blocked"] or check["captcha"]:
            print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—â–∏—Ç–∞: {check}")
        else:
            print("‚úÖ –ù–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫, –≤—Å—ë —Ö–æ—Ä–æ—à–æ")

        time.sleep(random.uniform(1.5, 2))


    def _scroll_one_page(self) -> str:
        ads_viewed = 0
        last_count = 0
        try:
            while True:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                ads = self.driver.find_elements(By.CSS_SELECTOR, "div[data-marker='item']")
                current_count = len(ads)

                if current_count == 0:
                    time.sleep(1)
                    continue

                # "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º" –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                while ads_viewed < current_count:
                    try:
                        ad = ads[ads_viewed]
                        # –°–∫—Ä–æ–ª–ª–∏–º –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é (–±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∏—Å—Ç–∞–ª –¥–æ –Ω–µ–≥–æ)
                        self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", ad)
                        time.sleep(random.uniform(0.5, 1.5))
                        ads_viewed += 1
                    except StaleElementReferenceException:
                        ads = self.driver.find_elements(By.CSS_SELECTOR, "div[data-marker='item']")
                        current_count = len(ads)
                        continue

                # –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ –µ—â—ë –Ω–∞ –æ–¥–∏–Ω —ç–∫—Ä–∞–Ω
                self.driver.execute_script("window.scrollBy(0, window.innerHeight);")
                time.sleep(2)

                # –ñ–¥—ë–º –ø–æ–¥–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–∏–ª–∏ –∫–æ–Ω—Ü–∞)
                ads = self.driver.find_elements(By.CSS_SELECTOR, "div[data-marker='item']")
                if len(ads) <= last_count:
                    print("üìÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç)")
                    break

                last_count = len(ads)

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ: {e}")
            return ""
        
        return self.driver.page_source


    def scroll_all_page(self) -> Generator:
        try:
            while True:
                try:
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    self.wait.until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-marker="item"]'))
                            )
                    print("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                except Exception as e:
                    print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")

                # –æ—Ç–¥–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                yield self._scroll_one_page()
                try:
                    next_button = self.driver.find_element(By.CSS_SELECTOR, 'a[data-marker="pagination-button/nextPage"]')

                    if not next_button.is_displayed() or not next_button.is_enabled():
                        print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        break

                    # —Å–∫—Ä–æ–ª–ª–∏–º –∫ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
                    self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_button)
                    time.sleep(0.5)

                    print("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ")
                    self.driver.execute_script("arguments[0].click();", next_button)

                    time.sleep(random.uniform(3, 6))  # –∂–¥—ë–º –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

                    try:
                        self.wait.until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-marker="item"]'))
                            )
                        print("‚úÖ –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")

                except NoSuchElementException:
                    print("‚úÖ –ö–Ω–æ–ø–∫–∞ '—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∫–æ–Ω–µ—Ü –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
                    break

        except Exception as e:
            print(f"‚ö†Ô∏è –°–∫—Ä–æ–ª–ª –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {e}")
        

    def _seting_options(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ UC"""
        self.options.add_argument("--no-sandbox")
        self.options.add_argument("--disable-infobars")
        self.options.add_argument("--start-maximized")
        self.options.add_argument("--lang=ru-RU")

        if self.headless:
            self.options.add_argument("--headless=new")
            self.options.add_argument("--disable-gpu")

        ua = UserAgent()
        self.options.add_argument(f"user-agent={ua.random}")


    def _check_block(self) -> Dict[str, Any]:
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫ """
        result = {"blocked": False, "captcha": False, "res": "Ok"}
        page_source = self.driver.page_source.lower()
        block_markers = ["access denied", "forbidden", "your request looks automated", "too many requests"]
        captcha_markers = ["captcha", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç"]
        if any(marker in page_source for marker in block_markers):
            result["blocked"] = True
        if any(marker in page_source for marker in captcha_markers):
            result["captcha"] = True
        return result


    def _save_cookies(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –≤ JSON"""
        with open(self.cookies, "w", encoding="utf-8") as f:
            json.dump(self.driver.get_cookies(), f, ensure_ascii=False, indent=2)
        print("üíæ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (JSON)")


    def _load_cookies(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É–∫–∏ –∏–∑ JSON"""
        try:
            with open(self.cookies, "r", encoding="utf-8") as f:
                cookies = json.load(f)
                for cookie in cookies:
                    cookie.pop("sameSite", None)
                    self.driver.add_cookie(cookie)
            print("‚úÖ Cookies –Ω–∞–π–¥–µ–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (JSON).")
        except FileNotFoundError:
            print("‚ö†Ô∏è Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è")

        
    def close(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º cookies"""
        self._save_cookies()
        self.driver.quit()


if __name__ == '__main__':
    page = ScrollPage(url='https://www.avito.ru/novorossiysk/fototehnika/zerkalnye_fotoapparaty-ASgBAgICAUS~A7AX?cd=1&q=canon+5d+mark+iii')
    try:
        for idx, html in enumerate(page.scroll_all_page(), start=1):
            print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {idx} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            print(html[:1000])  # –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–ª–∞–º–ª—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
            # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
            with open(f"page_{idx}.html", "w", encoding="utf-8") as f:
                f.write(html)
    finally:
        page.close()